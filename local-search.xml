<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/28/hello-world/"/>
    <url>/2023/10/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客-2</title>
    <link href="/2023/10/27/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-2/"/>
    <url>/2023/10/27/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-2/</url>
    
    <content type="html"><![CDATA[<p>优化博客</p><ol><li>删除blog文章文件</li><li>blog备份</li><li>了解静态页面刷新问题</li><li>主题设置</li><li></li></ol><h2 id="静态页面刷新问题"><a href="#静态页面刷新问题" class="headerlink" title="静态页面刷新问题"></a>静态页面刷新问题</h2><p>直接提示用户刷新一下不久好了？</p><p>相关链接：</p><ol><li><a href="https://blog.csdn.net/m0_37750806/article/details/119269635">Html静态页面更新，解决浏览器缓存不更新问题_html强制刷新多个css缓存-CSDN博客</a></li><li>GPT问答。问：静态页面在加载后，过段时间再次访问该网站是不是只会加载静态页面的缓存而不进行更新</li></ol><p>是的，当浏览器加载一个静态页面后，它会将页面的资源（例如HTML、CSS、JavaScript文件）存储在缓存中。如果你在一段时间后再次访问同样的网站，浏览器会首先检查缓存是否存在该页面的副本。如果存在，并且缓存仍然有效（根据资源的缓存策略），浏览器将直接从缓存中加载页面，而不会向服务器发起新的请求。</p><p>这种行为可以提高网页的加载速度和减轻服务器的负担。然而，这也意味着当你对静态页面进行更新时，用户可能无法立即看到最新的内容，直到浏览器的缓存过期或被清除为止。</p><p>如果你希望在访问静态页面时总是获取最新的内容，可以通过一些方法来解决缓存问题，如修改文件的URL、使用版本号或哈希值追加到文件名中、设置HTTP头信息等，来告诉浏览器获取最新的资源。这样可以确保用户始终获得更新后的页面内容。</p><p>另外，对于开发和测试阶段，你可以使用浏览器的开发者工具来禁用缓存，以便每次刷新页面时都从服务器获取最新的资源。</p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客-1</title>
    <link href="/2023/10/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-1/"/>
    <url>/2023/10/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><p>通过<a href="https://hexo.io/zh-cn/">Hexo</a>和<a href="https://github.com/">Github</a>搭建blog（变成了抓bug记录了）</p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/552639819">2022【保姆级教程】含泪搭建hexo博客 - 知乎 (zhihu.com)</a></li></ol><h2 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h2><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ol><li>在GitHub中创建账号。可以使用QQ邮箱</li><li>创建仓库repository。仓库名应该为：<strong>用户名</strong>.github.io  这个<strong>用户名</strong>使用你的GitHub帐号名称代替，是固定写法。</li></ol><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><p>Git是开源的分布式版本控制系统</p></li><li><p>安装Git。<a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package</a> </p></li><li><p>下载后默认配置安装，在命令行里输入git测试是否安装成功。</p></li><li><p>参考教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></li></ol><h3 id="Git与GitHub绑定"><a href="#Git与GitHub绑定" class="headerlink" title="Git与GitHub绑定"></a>Git与GitHub绑定</h3><p>鼠标右击打开Git Bash，输入</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name “你的GitHub用户名&quot;</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email &quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>注：不需要引号，是阅读标注</p><h3 id="hexo环境配置"><a href="#hexo环境配置" class="headerlink" title="hexo环境配置"></a>hexo环境配置</h3><ol><li>安装Node.js，<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a> </li><li>Node.js会包含环境变量及npm的安装。</li><li>安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</li></ol><h3 id="密钥配置"><a href="#密钥配置" class="headerlink" title="密钥配置"></a>密钥配置</h3><p>继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后直接三个回车即可，生成ssh密钥文件。</p><p>默认不需要设置密码</p><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制到GitHub右上角头像-&gt;Settings-&gt;keys页面，新建new SSH Key</p><p>Title为标题，任意填即可。将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。</p><p>在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com</code></p><p>原理：通过非对称加密rsa算法实现对push（提交）用户的认证</p><h4 id="打开pub报错"><a href="#打开pub报错" class="headerlink" title="打开pub报错"></a>打开pub报错</h4><p>解决方法</p><ol><li><a href="https://blog.csdn.net/J_____Q/article/details/108866850">cmd窗口查看</a></li><li>[在线打开 PUB 文件 ](<a href="https://blog.aspose.com/zh/pub/publisher-viewer-online-open-pub-file-online/#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BA%BF%E6%89%93%E5%BC%80">https://blog.aspose.com/zh/pub/publisher-viewer-online-open-pub-file-online/#:~:text=如何在线打开</a> PUB 文件 1 只需拖放您的 PUB 文件或使用浏览文件按钮上传。 您还可以提供文件,3 之后，您将能够在渲染后立即查看您的 PUB 文件。 4 将您的 PUB 页面保存为图像文件。)</li></ol><h4 id="检测GitHub公钥设置报错"><a href="#检测GitHub公钥设置报错" class="headerlink" title="检测GitHub公钥设置报错"></a>检测GitHub公钥设置报错</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">ASUS<span class="hljs-variable">@LAPTOP</span><span class="hljs-operator">-</span>GEMI5NEH MINGW64 <span class="hljs-operator">~</span><span class="hljs-operator">/</span>.ssh<br>$ ssh git<span class="hljs-variable">@github</span>.com<br>ssh: <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> host github.com port <span class="hljs-number">22</span>: Connection timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p>解决方法</p><ol><li><a href="https://blog.csdn.net/the__future/article/details/130038818">关于本地git通过ssh链接github时 time out问题的解决方法_github timeout-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/521340971">坑：ssh: connect to host github.com port 22: Connection refused - 知乎 (zhihu.com)</a></li><li>如果没有config文件可以自己创建，先输入内容。</li><li>保存时把类型选为“所有文件” 怎么弄？新建文本文档后，输完你的代码后，点击—文件—另存为—保存类型—所有文件就可以了,选完存储路径后可以不改文件名会直接覆盖掉。</li><li>另存无效，我直接修改后缀名</li><li><code>$ ssh -T git@github.com</code>检测是否连通，又有bug</li><li><a href="https://blog.csdn.net/fearlessxmm/article/details/90401690">解决The authenticity of host … can’t be established.</a></li><li>直接yes完成</li></ol><h2 id="三、创建blog（本地）"><a href="#三、创建blog（本地）" class="headerlink" title="三、创建blog（本地）"></a>三、创建blog（本地）</h2><p> 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p><p>使用npm命令安装Hexo，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <br></code></pre></td></tr></table></figure><p>安装完成后，初始化我们的博客，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure><p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p><p>别按顺序输入以下三条命令（在init新的文件夹里打开命令行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new test_my_site<br><br>hexo g<br><br>hexo s<br></code></pre></td></tr></table></figure><p>完成后，打开浏览器输入地址：</p><p>localhost:4000，可以看到新建的blog</p><h3 id="hexo-new-test-my-site的报错"><a href="#hexo-new-test-my-site的报错" class="headerlink" title="hexo new test_my_site的报错"></a>hexo new test_my_site的报错</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">PS D:\Blog\blog&gt; hexo new test_my_site<br><span class="hljs-keyword">ERROR </span>Cannot find module &#x27;moment&#x27;<br></code></pre></td></tr></table></figure><p>解决方法</p><p><a href="https://blog.csdn.net/qq_43592352/article/details/106922540">【node报错解决方案】Error: Cannot find module http-errors_node:module 报错-CSDN博客</a></p><h2 id="四、发布网站（Hexo与GitHub关联）"><a href="#四、发布网站（Hexo与GitHub关联）" class="headerlink" title="四、发布网站（Hexo与GitHub关联）"></a>四、发布网站（Hexo与GitHub关联）</h2><p>在blog根目录里的_config.yml文件称为<strong>站点配置文件</strong></p><p>themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题配置文件</strong></p><p>打开站点的配置文件_config.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">deploy：<br>type：qit<br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/用户名/用户名.github.io.git</span><br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</p><p>指令的目录要在blog目录底下，不然可能报错。</p><p>发布逻辑：new -&gt; generate -&gt; sever -&gt; deploy </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo g  <span class="hljs-comment">//生成静态文件</span><br>hexo s  <span class="hljs-comment">//本地预览</span><br>hexo d  <span class="hljs-comment">//部署文件</span><br></code></pre></td></tr></table></figure><h3 id="yml代码冒号后没有空格会报错"><a href="#yml代码冒号后没有空格会报错" class="headerlink" title="yml代码冒号后没有空格会报错"></a>yml代码冒号后没有空格会报错</h3><p>错误代码</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran">PS D:\Blog\blog&gt; hexo clean<br>FATAL<br>YAMLException: can not read a <span class="hljs-keyword">block</span> mapping <span class="hljs-built_in">entry</span>; a multiline key may not be an <span class="hljs-keyword">implicit</span> key (<span class="hljs-number">107</span>:<span class="hljs-number">16</span>)<br><br> <span class="hljs-number">104</span> | deploy:<br> <span class="hljs-number">105</span> |   <span class="hljs-keyword">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br> <span class="hljs-number">106</span> |   repo:https://github.com/narrciss/narrciss.gi ...<br> <span class="hljs-number">107</span> |   branch:master<br>----------------------^<br></code></pre></td></tr></table></figure><h2 id="五、发布bug"><a href="#五、发布bug" class="headerlink" title="五、发布bug"></a>五、发布bug</h2><p>之前是404报错，但是之后可以访问，但是<strong>deploy总是失败</strong></p><p>删除title的tag内容之后可以预览，但不能deploy。</p><p>第二天deploy又可以了</p><h3 id="检测链接的命令"><a href="#检测链接的命令" class="headerlink" title="检测链接的命令"></a>检测链接的命令</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T -p <span class="hljs-number">443</span> git<span class="hljs-variable">@ssh</span>.github.com<br><span class="hljs-variable">$ </span>ssh git<span class="hljs-variable">@github</span>.com<br>使用` ssh -vT git<span class="hljs-variable">@github</span>.com`检测ssh链接过程<br></code></pre></td></tr></table></figure><h3 id="页面404报错提示"><a href="#页面404报错提示" class="headerlink" title="页面404报错提示"></a>页面404报错提示</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: unable to access &#x27;https://github.com/narrciss/narrciss.github.io.git/&#x27;: Recv failure: Connection was reset<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (D:\Blog\blog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:514:28)<br>    at cp.emit (D:\Blog\blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure><h3 id="解决方法1（无效）"><a href="#解决方法1（无效）" class="headerlink" title="解决方法1（无效）"></a>解决方法1（无效）</h3><p>开启Devsidecar的Git代理发布文章也报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: unable to access &#x27;https://github.com/narrciss/narrciss.github.io.git/&#x27;: The requested URL returned error: 408<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><h3 id="解决方法2（无效）"><a href="#解决方法2（无效）" class="headerlink" title="解决方法2（无效）"></a>解决方法2（无效）</h3><p><strong>There isn’t a GitHub Pages site here.</strong></p><p>是不是应该编辑完成后生成静态文件再发布，还是不行。</p><h3 id="解决方法3（不适合）"><a href="#解决方法3（不适合）" class="headerlink" title="解决方法3（不适合）"></a>解决方法3（不适合）</h3><p><a href="https://blog.csdn.net/weixin_41256398/article/details/117994899">Hexo部署出现错误err: Error: Spawn failed解决方式_wei-xiansen的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/cairbin/p/14957855.html">解决hexo报错spwan failed - CairBin - 博客园 (cnblogs.com)</a></p><p>（注意链接1~2的<strong>报错code：128</strong>，我没有，使用此方法导致新的错误）</p><p>找到C盘的.gitconfig文件，删除增添的配置</p><p><a href="https://blog.csdn.net/wangxingxingalulu/article/details/118392299">idea使用git提交代码时报错Push failed Bad boolean config value ‘“false”‘ for ‘http.sslverify‘-CSDN博客</a></p><p>使用</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: bad boolean config value &#x27;fase&#x27; for &#x27;core.autocrlf&#x27;<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><p>修改</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: bad boolean config value &#x27;ture&#x27; for &#x27;core.autocrlf&#x27;<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><p>不小心删多了报错，完成后又回到原来的报错状态了。</p><p><a href="https://cosysn.github.io/2016/11/26/hexo-deploy-occur-fatal-Not-a-git-repository-or-any-of-the-parent-directories-git%E7%9A%84%E9%94%99%E8%AF%AF/#:~:text=%E5%B0%86hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84.deploy_git%2F%E5%88%A0%E9%99%A4%E6%8E%89%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8hexo,deploy%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">使用hexo deploy时遇到fatal: Not a git repository (or any of the parent directories): .git的错误 | 楼兰故居 (cosysn.github.io)</a></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: not a git repository (or any of the parent directories): .git<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><h3 id="解决方法4（有点用）"><a href="#解决方法4（有点用）" class="headerlink" title="解决方法4（有点用）"></a>解决方法4（有点用）</h3><p>检查远程仓库状态：使用git remote -v命令检查远程仓库的状态，确保远程仓库的URL正确且可用。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ git remote -v<br>fatal: <span class="hljs-keyword">not</span> <span class="hljs-keyword">a</span> git repository (<span class="hljs-keyword">or</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> parent <span class="hljs-built_in">directories</span>): .git<br></code></pre></td></tr></table></figure><p>发现没有repository</p><p>检测ssh链接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ ssh -T git@github.com<br><span class="hljs-keyword">Connection</span> <span class="hljs-keyword">reset</span> <span class="hljs-keyword">by</span> <span class="hljs-number">20.205</span><span class="hljs-number">.243</span><span class="hljs-number">.160</span> port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_51594453/article/details/120605700">【Note】git上手-解决连接github时connection reset的问题_github connection reset-CSDN博客</a></p><p>修改了.ssh目录的config，之后的bug</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-symbol">&#x27;https</span>://github.com/narrciss/narrciss.github.io.git/&#x27;: Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> github.com <span class="hljs-keyword">port</span> <span class="hljs-number">443</span> <span class="hljs-keyword">after</span> <span class="hljs-number">21209</span> ms: Couldn<span class="hljs-symbol">&#x27;t</span> connect <span class="hljs-keyword">to</span> server<br>FATAL Something<span class="hljs-symbol">&#x27;s</span> wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-literal">Error</span>: Spawn failed<br></code></pre></td></tr></table></figure><h3 id="解决方法5（没有使用）"><a href="#解决方法5（没有使用）" class="headerlink" title="解决方法5（没有使用）"></a>解决方法5（没有使用）</h3><p><a href="https://zhuanlan.zhihu.com/p/521340971">坑：ssh: connect to host github.com port 22: Connection refused - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
