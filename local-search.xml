<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>信息收集-知乎</title>
    <link href="/2023/10/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E7%9F%A5%E4%B9%8E/"/>
    <url>/2023/10/28/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86-%E7%9F%A5%E4%B9%8E/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/50408698/answer/2997610936">(30 条消息) 有哪些你看了以后大呼过瘾的编程书？ - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>信息收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客-3</title>
    <link href="/2023/10/28/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-1/"/>
    <url>/2023/10/28/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96-1/</url>
    
    <content type="html"><![CDATA[<p>优化方向</p><ol><li>博客备份</li><li>博客图床</li><li>个性化设置，如SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置等</li></ol><h2 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h2><h3 id="备份原因"><a href="#备份原因" class="headerlink" title="备份原因"></a>备份原因</h3><p>上传到仓库只有生成的静态网页文件，本地的源文件删除了就不能通过git恢复了.</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://cloud.tencent.com/developer/article/1743949">Hexo搭建个人博客（备份和迁移）-腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://blog.csdn.net/muzihuaner/article/details/113880440">【精选】Hexo博客的备份与恢复_hexo 博客 源丢失_木子欢儿的博客-CSDN博客</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440">添加远程库 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></li><li><a href="https://blog.csdn.net/whu_zhangmin/article/details/12944999">git remote命令查看远程仓库信息时，出现new ( next fetch will store in remotes&#x2F;origin)提示-CSDN博客</a></li><li><a href="https://blog.csdn.net/benben_2015/article/details/82867345">Error：pathspec ‘master’ did not match any files known to git_master did not match-CSDN博客</a>  切换分支的报错参考</li><li><a href="https://zhuanlan.zhihu.com/p/553144729">Hexo博客源文件备份 - 知乎 (zhihu.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1964358">Git命令手动备份Hexo博客源文件-腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://blog.csdn.net/wudinaniya/article/details/104125961">git 克隆指定分支代码_git clone -b-CSDN博客</a></li></ol><h3 id="备用"><a href="#备用" class="headerlink" title="备用"></a>备用</h3><ol><li><a href="https://zhuanlan.zhihu.com/p/136355306">上传本地文件（夹）到GitHub和更新仓库文件 - 知乎 (zhihu.com)</a></li><li><a href="https://www.runoob.com/git/git-branch.html">Git 分支管理 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://blog.csdn.net/qq_41793001/article/details/103151182">使用hexo-git-backup插件备份博客源文件-CSDN博客</a></li></ol><h2 id="预先处理"><a href="#预先处理" class="headerlink" title="预先处理"></a>预先处理</h2><h3 id="删除-git"><a href="#删除-git" class="headerlink" title="删除 .git"></a>删除 .git</h3><p>将hexo的主题下的<code>.git</code>删除，比如删除themes&#x2F;next&#x2F;目录下的.git否则无法将主题文件夹push。（不能重复包含.git）</p><h3 id="创建-gitignore"><a href="#创建-gitignore" class="headerlink" title="创建.gitignore"></a>创建.gitignore</h3><p>在本地blog文件夹下创建文件<code>.gitignore</code>（格式：所有文件），正常情况这个文件是自动生成的，打开后写入：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-meta">.DS_Store</span><br>Thumbs<span class="hljs-number">.</span><span class="hljs-built_in">db</span><br><span class="hljs-built_in">db</span><span class="hljs-number">.</span>json<br>*.log<br>node_modules/<br><span class="hljs-meta">public</span>/<br><span class="hljs-meta">.deploy</span>*/<br></code></pre></td></tr></table></figure><p>这个文件的存在是指在push的时候忽略文件中的文件格式。</p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#git初始化，好像会创建一个默认仓库，如果有仓库就没有影响。</span><br>git init<br><br><span class="hljs-comment">#创建hexo分支，用来存放源码</span><br>git checkout -b hexo<br><br><span class="hljs-comment">#git 文件添加</span><br>git <span class="hljs-built_in">add</span> .<br><br><span class="hljs-comment">#git 提交</span><br>git commit -m <span class="hljs-string">&quot;backup&quot;</span><br><br><span class="hljs-comment">#添加远程仓库，github上的博客仓库 </span><br>git remote <span class="hljs-built_in">add</span> origin git@gitHub.com:用户名/仓库名.git<br><br><span class="hljs-comment">#push到hexo分支</span><br>git push origin hexo<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>在git中，可利用checkout命令转换分支，该命令的作用就是切换分支或恢复工作树文件，语法为“git checkout 分支名”；当参数设置为“-b”时，可以在新分支创建的同时切换分支，语法为“git checkout -b 分支名”。</li><li>origin是远程仓库的命名，你的仓库的小名。<strong>关联到远程库是git操作(远程库的分支等操作），部署是hexo操作（部署到仓库)。</strong></li></ol><h2 id="分支的问题"><a href="#分支的问题" class="headerlink" title="分支的问题"></a>分支的问题</h2><ol><li><code>ASUS@LAPTOP-GEMI5NEH MINGW64 /d/Blog/blog2 (hexo)</code>命令后缀是hexo，说明源文件提交到的分支是它？但是config里部署的分支是master</li><li>网页访问的仓库地址时是访问有生成文件的master分支，但是master分支为什么更新了？表明部署成功了</li><li>我的GitHub仓库只有master和hexo两个分支，我使用hexo分支备份源文件，master分支存储生成文件，是部署同时把源文件也上传了吗？</li><li>虽然本地命令行说明是hexo分支，也能达成备份和更新的目的，但我在考虑是否需要更换到master</li></ol><h2 id="注意是手动备份"><a href="#注意是手动备份" class="headerlink" title="注意是手动备份"></a>注意是手动备份</h2><p>也就是说需要重复备份才会更新GitHub上hexo分支上储存的源文件（查看GitHub备份的源文件后发现还是初始上传的样子），分支的问题1-3是因为没有搞清楚是手动备份，还是部署到master分支</p><p>问题4有点错误，现在只是手动备份了一次。</p><p>备份路径的后缀是hexo，不用修改了，以后也要手动备份到这。</p><h2 id="切换分支记录"><a href="#切换分支记录" class="headerlink" title="切换分支记录"></a>切换分支记录</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs scss">ASUS<span class="hljs-keyword">@LAPTOP-GEMI</span>5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git checkout master<br><span class="hljs-attribute">error</span>: pathspec <span class="hljs-string">&#x27;master&#x27;</span> did <span class="hljs-keyword">not</span> match any file(s) known to git<br><br>ASUS<span class="hljs-keyword">@LAPTOP-GEMI</span>5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git branch -a<br>* hexo<br>  remotes/origin/hexo<br><br>ASUS<span class="hljs-keyword">@LAPTOP-GEMI</span>5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git remote show origin<br>* remote origin<br>  Fetch <span class="hljs-attribute">URL</span>: git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:narrciss/narrciss.github.io.git<br>  Push  <span class="hljs-attribute">URL</span>: git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:narrciss/narrciss.github.io.git<br>  HEAD <span class="hljs-attribute">branch</span>: master<br>  Remote <span class="hljs-attribute">branches</span>:<br>    hexo   tracked<br>    master new (next fetch will store in remotes/origin)<br>  Local ref configured for <span class="hljs-string">&#x27;git push&#x27;</span>:<br>    hexo pushes to hexo (up to date)<br><br>ASUS<span class="hljs-keyword">@LAPTOP-GEMI</span>5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git checkout /remotes/origin/master<br><span class="hljs-attribute">fatal</span>: Invalid path <span class="hljs-string">&#x27;D:/Git/remotes&#x27;</span>: No such file <span class="hljs-keyword">or</span> directory<br><br>ASUS<span class="hljs-keyword">@LAPTOP-GEMI</span>5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git remote -v<br>origin  git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:narrciss/narrciss.github.io.git (fetch)<br>origin  git<span class="hljs-keyword">@github</span>.<span class="hljs-attribute">com</span>:narrciss/narrciss.github.io.git (push)<br><br></code></pre></td></tr></table></figure><h3 id="部署时，master分支设置为追踪"><a href="#部署时，master分支设置为追踪" class="headerlink" title="部署时，master分支设置为追踪"></a>部署时，master分支设置为追踪</h3><p>不知道作用</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">To</span> https:<span class="hljs-comment">//github.com/narrciss/narrciss.github.io.git</span><br> + f107820<span class="hljs-params">...</span>b31a274 HEAD -&gt; master (forced update)<br>branch <span class="hljs-string">&#x27;master&#x27;</span> <span class="hljs-built_in">set</span> up <span class="hljs-keyword">to</span> track <span class="hljs-string">&#x27;https://github.com/narrciss/narrciss.github.io.git/master&#x27;</span>.<br>INFO  Deploy done: git<br><br></code></pre></td></tr></table></figure><h2 id="同步分支信息"><a href="#同步分支信息" class="headerlink" title="同步分支信息"></a>同步分支信息</h2><p>使用 git fetch origin 命令同步分支信息（参考资料6）</p><p>原来，git branch -a 输出的是本地仓库的远程分支信息，</p><p>而git remote show origin需要联网输出实时的远程仓库的分支信息。</p><p>出现new ( next fetch will store in remotes&#x2F;origin)，由于远程新增了分支，而本地并没有同步信息导致的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">ASUS@LAPTOP-GEMI5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git fetch origin<br>remote: Enumerating objects: 364, <span class="hljs-keyword">done</span>.<br>remote: Counting objects: 100% (364/364), <span class="hljs-keyword">done</span>.<br>remote: Compressing objects: 100% (234/234), <span class="hljs-keyword">done</span>.<br>remote: Total 364 (delta 65), reused 364 (delta 65), pack-reused 0<br>Receiving objects: 100% (364/364), 7.39 MiB | 1.68 MiB/s, <span class="hljs-keyword">done</span>.<br>Resolving deltas: 100% (65/65), <span class="hljs-keyword">done</span>.<br>From github.com:narrciss/narrciss.github.io<br> * [new branch]      master     -&gt; origin/master<br><br>ASUS@LAPTOP-GEMI5NEH MINGW64 /d/Blog/blog2 (hexo)<br>$ git branch -a<br>* hexo<br>  remotes/origin/hexo<br>  remotes/origin/master<br>  <br></code></pre></td></tr></table></figure><h2 id="以后手动备份的操作"><a href="#以后手动备份的操作" class="headerlink" title="以后手动备份的操作"></a>以后手动备份的操作</h2><p>以后更新备份使用：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">git add .<br>git commit  -m  &quot;backup&quot;<br>git push origin 分支名 <br></code></pre></td></tr></table></figure><p>不具体指定push的分支会报错</p><p><a href="https://www.cnblogs.com/Amerys/p/14669572.html">git推送代码报错：fatal: The current branch master has no upstream branch. To push the current branch and set the remote as upstream - Amerys - 博客园 (cnblogs.com)</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git push<br>fatal: The <span class="hljs-keyword">current</span> branch hexo has <span class="hljs-keyword">no</span> upstream branch.<br><span class="hljs-keyword">To</span> push the <span class="hljs-keyword">current</span> branch <span class="hljs-keyword">and</span> <span class="hljs-keyword">set</span> the remote <span class="hljs-keyword">as</span> upstream, use<br><br>    git push <span class="hljs-comment">--set-upstream origin hexo</span><br><br><span class="hljs-keyword">To</span> have this happen automatically <span class="hljs-keyword">for</span> branches <span class="hljs-keyword">without</span> a tracking<br>upstream, see <span class="hljs-string">&#x27;push.autoSetupRemote&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;git help config&#x27;</span>.<br></code></pre></td></tr></table></figure><h2 id="克隆分支到本地"><a href="#克隆分支到本地" class="headerlink" title="克隆分支到本地"></a>克隆分支到本地</h2><p>注意不是克隆库，而是需要克隆分支。（因为我按照参考资料1使用分支保存源文件）</p><p>使用git拉代码时可以使用 -b 指定分支指定拉 master 分支代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> <span class="hljs-keyword">master</span> <span class="hljs-title">http</span>://github.com/narrciss/narrciss.github.io<br></code></pre></td></tr></table></figure><p>查看当前项目拉的分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch</span><br></code></pre></td></tr></table></figure><p>具体的分支详情</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git branch -vv</span><br></code></pre></td></tr></table></figure><h2 id="恢复博客（没有尝试）"><a href="#恢复博客（没有尝试）" class="headerlink" title="恢复博客（没有尝试）"></a>恢复博客（没有尝试）</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">恢复博客<br>在<span class="hljs-keyword">clone来的文件夹里执行，记得搭建环境</span><br><span class="hljs-keyword"></span><br>npm <span class="hljs-keyword">install </span>hexo-cli<br>npm <span class="hljs-keyword">install</span><br><span class="hljs-keyword"></span>npm <span class="hljs-keyword">install </span>hexo-deployer-git<br>这样博客源文件就成功移植了，再用hexo clean、hexo g、hexo d即可部署完成<br></code></pre></td></tr></table></figure><h2 id="总结命令"><a href="#总结命令" class="headerlink" title="总结命令"></a>总结命令</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git init<br>git checkout -b hexo<br>git add .<br>git commit -m <span class="hljs-string">&quot;backup&quot;</span><br>git remote add origin git@gitHub.com:用户名/仓库名.git<br>git push origin hexo<br><br>git checkout origin/<span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> checkout <span class="hljs-keyword">master</span><br><br><span class="hljs-title">git</span> branch -a<br>git remote show origin<br>git remote -v<br><br>git fetch origin<br><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">-b</span> <span class="hljs-keyword">master</span> <span class="hljs-title">http</span>://github.com/narrciss/narrciss.github.io<br>git branch -vv<br></code></pre></td></tr></table></figure><h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span>  -m  &quot;backup&quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客-2</title>
    <link href="/2023/10/27/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-2/"/>
    <url>/2023/10/27/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-2/</url>
    
    <content type="html"><![CDATA[<h2 id="静态页面刷新问题"><a href="#静态页面刷新问题" class="headerlink" title="静态页面刷新问题"></a>静态页面刷新问题</h2><p>直接提示用户刷新一下不久好了？</p><p>相关链接：</p><ol><li><a href="https://blog.csdn.net/m0_37750806/article/details/119269635">Html静态页面更新，解决浏览器缓存不更新问题_html强制刷新多个css缓存-CSDN博客</a></li><li>GPT问答。问：静态页面在加载后，过段时间再次访问该网站是不是只会加载静态页面的缓存而不进行更新</li></ol><p>是的，当浏览器加载一个静态页面后，它会将页面的资源（例如HTML、CSS、JavaScript文件）存储在缓存中。如果你在一段时间后再次访问同样的网站，浏览器会首先检查缓存是否存在该页面的副本。如果存在，并且缓存仍然有效（根据资源的缓存策略），浏览器将直接从缓存中加载页面，而不会向服务器发起新的请求。</p><p>这种行为可以提高网页的加载速度和减轻服务器的负担。然而，这也意味着当你对静态页面进行更新时，用户可能无法立即看到最新的内容，直到浏览器的缓存过期或被清除为止。</p><p>如果你希望在访问静态页面时总是获取最新的内容，可以通过一些方法来解决缓存问题，如修改文件的URL、使用版本号或哈希值追加到文件名中、设置HTTP头信息等，来告诉浏览器获取最新的资源。这样可以确保用户始终获得更新后的页面内容。</p><p>另外，对于开发和测试阶段，你可以使用浏览器的开发者工具来禁用缓存，以便每次刷新页面时都从服务器获取最新的资源。</p><h2 id="新建的blog可以预览但使用hexo-d命令没有更新GitHub"><a href="#新建的blog可以预览但使用hexo-d命令没有更新GitHub" class="headerlink" title="新建的blog可以预览但使用hexo d命令没有更新GitHub"></a>新建的blog可以预览但使用hexo d命令没有更新GitHub</h2><p>记得检查_config.yml配置</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">deploy</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;git&#x27;</span><br>  <span class="hljs-attribute">repo</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://github.com/用户名/用户名.github.io.git</span><br>  <span class="hljs-attribute">branch</span><span class="hljs-punctuation">:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="使用fluid主题，source里的about文件夹里的index-md不能使用typora打开，会出现编码错误"><a href="#使用fluid主题，source里的about文件夹里的index-md不能使用typora打开，会出现编码错误" class="headerlink" title="使用fluid主题，source里的about文件夹里的index.md不能使用typora打开，会出现编码错误"></a>使用fluid主题，source里的about文件夹里的index.md不能使用typora打开，会出现编码错误</h2><h2 id="报错-FATAL-YAMLException-duplicated-mapping"><a href="#报错-FATAL-YAMLException-duplicated-mapping" class="headerlink" title="报错-FATAL-YAMLException-duplicated-mapping"></a>报错-FATAL-YAMLException-duplicated-mapping</h2><p>配置文件有重复代码，删除即可。</p><h2 id="YAMLException-can-not-read-a-block-mapping-entry"><a href="#YAMLException-can-not-read-a-block-mapping-entry" class="headerlink" title="YAMLException: can not read a block mapping entry;"></a>YAMLException: can not read a block mapping entry;</h2><p>解决方法：使用vscode打开，检查是否有编码错误和缺失空格</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>Process failed: _posts/搭建博客<span class="hljs-string">-2</span>.md<br>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key (5:1)<br><br> 2 | date: 2023<span class="hljs-string">-10</span><span class="hljs-string">-27</span> 20:48:40<br> 3 | tags: blog<br> 4 | excerpt:捉bug。<br> 5 |<br></code></pre></td></tr></table></figure><h2 id="删除blog文件与卸载hexo"><a href="#删除blog文件与卸载hexo" class="headerlink" title="删除blog文件与卸载hexo"></a>删除blog文件与卸载hexo</h2><p><a href="https://www.zhihu.com/question/49715656"> 如何干净的卸载 HEXO？ - 知乎 (zhihu.com)</a></p><p>命令提示符中，</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bnf">npm uninstall hexo-cli -g<br></code></pre></td></tr></table></figure><p>然后文件夹中的blog，手动删除。</p><p>另外，进行重装之前，如果还是在原来位置，必须手动清理了才能迁移安装。</p><p><a href="https://cloud.tencent.com/developer/article/2140491">Hexo博客彻底删除文章教程-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>手动删除本地文件后直接与GitHub同步</p><h2 id="Connection-was-reset"><a href="#Connection-was-reset" class="headerlink" title="Connection was reset"></a>Connection was reset</h2><p>报错提示</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: unable to access &#x27;https://github.com/narrciss/narrciss.github.io.git/&#x27;: Recv failure: Connection was reset<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-symbol">&#x27;https</span>://github.com/narrciss/narrciss.github.io.git/&#x27;: Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> github.com <span class="hljs-keyword">port</span> <span class="hljs-number">443</span> <span class="hljs-keyword">after</span> <span class="hljs-number">21113</span> ms: Couldn<span class="hljs-symbol">&#x27;t</span> connect <span class="hljs-keyword">to</span> server<br>FATAL Something<span class="hljs-symbol">&#x27;s</span> wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-literal">Error</span>: Spawn failed<br></code></pre></td></tr></table></figure><p>一段时间后又恢复，大概是端口占用问题，具体是哪个端口记得是443？</p><p>相关链接</p><ol><li><a href="https://blog.csdn.net/commshare/article/details/130523009">【github】Connection reset by 20.205.243.160 port 443_等风来不如迎风去的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/algebra007/article/details/119242167">如何查看端口被哪个进程占用（Windows&#x2F;Linux）_查看占用端口_天下溪-algebra的博客-CSDN博客</a></li><li><a href="https://www.runoob.com/w3cnote/windows-finds-port-usage.html">Windows下如何查看某个端口被谁占用 | 菜鸟教程 (runoob.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/654998555">报错处理-Recv failure Connection was reset - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/good_good_xiu/article/details/118567249">git提交或克隆报错fatal: unable to access ‘https://github.com/tata20191003/autowrite.git/‘: Failed to connec_fatal: unable to access ‘https://github.com/whldk/_good_good_xiu的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_44223180/article/details/133059575">【完美解决】GitHub连接超时问题 Recv failure: Connection was reset_github请求超时-CSDN博客</a></li></ol><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>使用devsidecar的git.exe加速</li><li>本机代理（方法6，结果失败）</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ASUS@LAPTOP-GEMI5NEH MINGW64 /d/Blog/blog2<br>$ git<span class="hljs-built_in"> config </span>--global -l<br>user.<span class="hljs-attribute">name</span>=narrciss<br>user.<span class="hljs-attribute">email</span>=2576124017@qq.com<br>http.<span class="hljs-attribute">sslverify</span>=<span class="hljs-literal">true</span><br>http.<span class="hljs-attribute">proxy</span>=http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><p>代理ip地址有</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>=<span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">7920</span>;<span class="hljs-keyword">https</span>=<span class="hljs-keyword">http</span>://<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">31181</span><br></code></pre></td></tr></table></figure><p>报错为</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-symbol">&#x27;https</span>://github.com/narrciss/narrciss.github.io.git/&#x27;: Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-keyword">port</span> <span class="hljs-number">7890</span> <span class="hljs-keyword">after</span> <span class="hljs-number">2047</span> ms: Couldn<span class="hljs-symbol">&#x27;t</span> connect <span class="hljs-keyword">to</span> server<br>FATAL Something<span class="hljs-symbol">&#x27;s</span> wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-literal">Error</span>: Spawn failed<br></code></pre></td></tr></table></figure><p>恢复原有状态</p><ol><li><a href="https://zhuanlan.zhihu.com/p/107323951">git 设置和取消指定域名代理 - git config proxy - 知乎 (zhihu.com)</a></li><li><a href="https://juejin.cn/post/7216147029230993445">Git配置代理和取消的两种方法 - 掘金 (juejin.cn)</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客-1</title>
    <link href="/2023/10/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-1/"/>
    <url>/2023/10/25/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><p>通过<a href="https://hexo.io/zh-cn/">Hexo</a>和<a href="https://github.com/">Github</a>搭建blog（变成了抓bug记录了）</p><p>参考文章：</p><ol><li><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/552639819">2022【保姆级教程】含泪搭建hexo博客 - 知乎 (zhihu.com)</a></li></ol><h2 id="二、环境配置"><a href="#二、环境配置" class="headerlink" title="二、环境配置"></a>二、环境配置</h2><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><ol><li>在GitHub中创建账号。可以使用QQ邮箱</li><li>创建仓库repository。仓库名应该为：<strong>用户名</strong>.github.io  这个<strong>用户名</strong>使用你的GitHub帐号名称代替，是固定写法。</li></ol><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><ol><li><p>Git是开源的分布式版本控制系统</p></li><li><p>安装Git。<a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package</a> </p></li><li><p>下载后默认配置安装，在命令行里输入git测试是否安装成功。</p></li><li><p>参考教程：<a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p></li></ol><h3 id="Git与GitHub绑定"><a href="#Git与GitHub绑定" class="headerlink" title="Git与GitHub绑定"></a>Git与GitHub绑定</h3><p>鼠标右击打开Git Bash，输入</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.name “你的GitHub用户名&quot;</span><br>git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global user.email &quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>注：不需要引号，是阅读标注</p><h3 id="hexo环境配置"><a href="#hexo环境配置" class="headerlink" title="hexo环境配置"></a>hexo环境配置</h3><ol><li>安装Node.js，<a href="https://link.zhihu.com/?target=https://nodejs.org/en/download/">Download | Node.js</a> </li><li>Node.js会包含环境变量及npm的安装。</li><li>安装后，检测Node.js是否安装成功，在命令行中输入 node -v :</li></ol><h3 id="密钥配置"><a href="#密钥配置" class="headerlink" title="密钥配置"></a>密钥配置</h3><p>继续输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的GitHub注册邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>然后直接三个回车即可，生成ssh密钥文件。</p><p>默认不需要设置密码</p><p>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制到GitHub右上角头像-&gt;Settings-&gt;keys页面，新建new SSH Key</p><p>Title为标题，任意填即可。将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。</p><p>在Git Bash中检测GitHub公钥设置是否成功，输入 <code>ssh git@github.com</code></p><p>原理：通过非对称加密rsa算法实现对push（提交）用户的认证</p><h4 id="打开pub报错"><a href="#打开pub报错" class="headerlink" title="打开pub报错"></a>打开pub报错</h4><p>解决方法</p><ol><li><a href="https://blog.csdn.net/J_____Q/article/details/108866850">cmd窗口查看</a></li><li>[在线打开 PUB 文件 ](<a href="https://blog.aspose.com/zh/pub/publisher-viewer-online-open-pub-file-online/#:~:text=%E5%A6%82%E4%BD%95%E5%9C%A8%E7%BA%BF%E6%89%93%E5%BC%80">https://blog.aspose.com/zh/pub/publisher-viewer-online-open-pub-file-online/#:~:text=如何在线打开</a> PUB 文件 1 只需拖放您的 PUB 文件或使用浏览文件按钮上传。 您还可以提供文件,3 之后，您将能够在渲染后立即查看您的 PUB 文件。 4 将您的 PUB 页面保存为图像文件。)</li></ol><h4 id="检测GitHub公钥设置报错"><a href="#检测GitHub公钥设置报错" class="headerlink" title="检测GitHub公钥设置报错"></a>检测GitHub公钥设置报错</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">ASUS<span class="hljs-variable">@LAPTOP</span><span class="hljs-operator">-</span>GEMI5NEH MINGW64 <span class="hljs-operator">~</span><span class="hljs-operator">/</span>.ssh<br>$ ssh git<span class="hljs-variable">@github</span>.com<br>ssh: <span class="hljs-keyword">connect</span> <span class="hljs-keyword">to</span> host github.com port <span class="hljs-number">22</span>: Connection timed <span class="hljs-keyword">out</span><br></code></pre></td></tr></table></figure><p>解决方法</p><ol><li><a href="https://blog.csdn.net/the__future/article/details/130038818">关于本地git通过ssh链接github时 time out问题的解决方法_github timeout-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/521340971">坑：ssh: connect to host github.com port 22: Connection refused - 知乎 (zhihu.com)</a></li><li>如果没有config文件可以自己创建，先输入内容。</li><li>保存时把类型选为“所有文件” 怎么弄？新建文本文档后，输完你的代码后，点击—文件—另存为—保存类型—所有文件就可以了,选完存储路径后可以不改文件名会直接覆盖掉。</li><li>另存无效，我直接修改后缀名</li><li><code>$ ssh -T git@github.com</code>检测是否连通，又有bug</li><li><a href="https://blog.csdn.net/fearlessxmm/article/details/90401690">解决The authenticity of host … can’t be established.</a></li><li>直接yes完成</li></ol><h2 id="三、创建blog（本地）"><a href="#三、创建blog（本地）" class="headerlink" title="三、创建blog（本地）"></a>三、创建blog（本地）</h2><p> 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行</p><p>使用npm命令安装Hexo，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli <br></code></pre></td></tr></table></figure><p>安装完成后，初始化我们的博客，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br></code></pre></td></tr></table></figure><p>注意，这里的命令都是作用在刚刚创建的Blog文件夹中。</p><p>别按顺序输入以下三条命令（在init新的文件夹里打开命令行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new test_my_site<br><br>hexo g<br><br>hexo s<br></code></pre></td></tr></table></figure><p>完成后，打开浏览器输入地址：</p><p>localhost:4000，可以看到新建的blog</p><h3 id="hexo-new-test-my-site的报错"><a href="#hexo-new-test-my-site的报错" class="headerlink" title="hexo new test_my_site的报错"></a>hexo new test_my_site的报错</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">PS D:\Blog\blog&gt; hexo new test_my_site<br><span class="hljs-keyword">ERROR </span>Cannot find module &#x27;moment&#x27;<br></code></pre></td></tr></table></figure><p>解决方法</p><p><a href="https://blog.csdn.net/qq_43592352/article/details/106922540">【node报错解决方案】Error: Cannot find module http-errors_node:module 报错-CSDN博客</a></p><h2 id="四、发布网站（Hexo与GitHub关联）"><a href="#四、发布网站（Hexo与GitHub关联）" class="headerlink" title="四、发布网站（Hexo与GitHub关联）"></a>四、发布网站（Hexo与GitHub关联）</h2><p>在blog根目录里的_config.yml文件称为<strong>站点配置文件</strong></p><p>themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题配置文件</strong></p><p>打开站点的配置文件_config.yml</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts">deploy：<br>type：qit<br><span class="hljs-symbol">repo:</span> https:<span class="hljs-comment">//github.com/用户名/用户名.github.io.git</span><br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</p><p>指令的目录要在blog目录底下，不然可能报错。</p><p>发布逻辑：new -&gt; generate -&gt; sever -&gt; deploy </p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">hexo g  <span class="hljs-comment">//生成静态文件</span><br>hexo s  <span class="hljs-comment">//本地预览</span><br>hexo d  <span class="hljs-comment">//部署文件</span><br></code></pre></td></tr></table></figure><h3 id="yml代码冒号后没有空格会报错"><a href="#yml代码冒号后没有空格会报错" class="headerlink" title="yml代码冒号后没有空格会报错"></a>yml代码冒号后没有空格会报错</h3><p>错误代码</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs fortran">PS D:\Blog\blog&gt; hexo clean<br>FATAL<br>YAMLException: can not read a <span class="hljs-keyword">block</span> mapping <span class="hljs-built_in">entry</span>; a multiline key may not be an <span class="hljs-keyword">implicit</span> key (<span class="hljs-number">107</span>:<span class="hljs-number">16</span>)<br><br> <span class="hljs-number">104</span> | deploy:<br> <span class="hljs-number">105</span> |   <span class="hljs-keyword">type</span>: <span class="hljs-string">&#x27;git&#x27;</span><br> <span class="hljs-number">106</span> |   repo:https://github.com/narrciss/narrciss.gi ...<br> <span class="hljs-number">107</span> |   branch:master<br>----------------------^<br></code></pre></td></tr></table></figure><h2 id="五、发布bug"><a href="#五、发布bug" class="headerlink" title="五、发布bug"></a>五、发布bug</h2><p>之前是404报错，但是之后可以访问，但是<strong>deploy总是失败</strong></p><p>删除title的tag内容之后可以预览，但不能deploy。</p><p>第二天deploy又可以了</p><h3 id="检测链接的命令"><a href="#检测链接的命令" class="headerlink" title="检测链接的命令"></a>检测链接的命令</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T -p <span class="hljs-number">443</span> git<span class="hljs-variable">@ssh</span>.github.com<br><span class="hljs-variable">$ </span>ssh git<span class="hljs-variable">@github</span>.com<br>使用` ssh -vT git<span class="hljs-variable">@github</span>.com`检测ssh链接过程<br></code></pre></td></tr></table></figure><h3 id="页面404报错提示"><a href="#页面404报错提示" class="headerlink" title="页面404报错提示"></a>页面404报错提示</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: unable to access &#x27;https://github.com/narrciss/narrciss.github.io.git/&#x27;: Recv failure: Connection was reset<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br>    at ChildProcess.&lt;anonymous&gt; (D:\Blog\blog\node_modules\hexo-util\lib\spawn.js:51:21)<br>    at ChildProcess.emit (node:events:514:28)<br>    at cp.emit (D:\Blog\blog\node_modules\cross-spawn\lib\enoent.js:34:29)<br>    at ChildProcess._handle.onexit (node:internal/child_process:294:12)<br></code></pre></td></tr></table></figure><h3 id="解决方法1（无效）"><a href="#解决方法1（无效）" class="headerlink" title="解决方法1（无效）"></a>解决方法1（无效）</h3><p>开启Devsidecar的Git代理发布文章也报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: unable to access &#x27;https://github.com/narrciss/narrciss.github.io.git/&#x27;: The requested URL returned error: 408<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><h3 id="解决方法2（无效）"><a href="#解决方法2（无效）" class="headerlink" title="解决方法2（无效）"></a>解决方法2（无效）</h3><p><strong>There isn’t a GitHub Pages site here.</strong></p><p>是不是应该编辑完成后生成静态文件再发布，还是不行。</p><h3 id="解决方法3（不适合）"><a href="#解决方法3（不适合）" class="headerlink" title="解决方法3（不适合）"></a>解决方法3（不适合）</h3><p><a href="https://blog.csdn.net/weixin_41256398/article/details/117994899">Hexo部署出现错误err: Error: Spawn failed解决方式_wei-xiansen的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/cairbin/p/14957855.html">解决hexo报错spwan failed - CairBin - 博客园 (cnblogs.com)</a></p><p>（注意链接1~2的<strong>报错code：128</strong>，我没有，使用此方法导致新的错误）</p><p>找到C盘的.gitconfig文件，删除增添的配置</p><p><a href="https://blog.csdn.net/wangxingxingalulu/article/details/118392299">idea使用git提交代码时报错Push failed Bad boolean config value ‘“false”‘ for ‘http.sslverify‘-CSDN博客</a></p><p>使用</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: bad boolean config value &#x27;fase&#x27; for &#x27;core.autocrlf&#x27;<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><p>修改</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: bad boolean config value &#x27;ture&#x27; for &#x27;core.autocrlf&#x27;<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><p>不小心删多了报错，完成后又回到原来的报错状态了。</p><p><a href="https://cosysn.github.io/2016/11/26/hexo-deploy-occur-fatal-Not-a-git-repository-or-any-of-the-parent-directories-git%E7%9A%84%E9%94%99%E8%AF%AF/#:~:text=%E5%B0%86hexo%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84.deploy_git%2F%E5%88%A0%E9%99%A4%E6%8E%89%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8hexo,deploy%E9%87%8D%E6%96%B0%E9%83%A8%E7%BD%B2%E5%B0%B1%E5%8F%AF%E4%BB%A5%E4%BA%86%E3%80%82">使用hexo deploy时遇到fatal: Not a git repository (or any of the parent directories): .git的错误 | 楼兰故居 (cosysn.github.io)</a></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">fatal: not a git repository (or any of the parent directories): .git<br>FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-keyword">Error: </span>Spawn failed<br></code></pre></td></tr></table></figure><h3 id="解决方法4（有点用）"><a href="#解决方法4（有点用）" class="headerlink" title="解决方法4（有点用）"></a>解决方法4（有点用）</h3><p>检查远程仓库状态：使用git remote -v命令检查远程仓库的状态，确保远程仓库的URL正确且可用。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">$ git remote -v<br>fatal: <span class="hljs-keyword">not</span> <span class="hljs-keyword">a</span> git repository (<span class="hljs-keyword">or</span> <span class="hljs-keyword">any</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> parent <span class="hljs-built_in">directories</span>): .git<br></code></pre></td></tr></table></figure><p>发现没有repository</p><p>检测ssh链接</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ ssh -T git@github.com<br><span class="hljs-keyword">Connection</span> <span class="hljs-keyword">reset</span> <span class="hljs-keyword">by</span> <span class="hljs-number">20.205</span><span class="hljs-number">.243</span><span class="hljs-number">.160</span> port <span class="hljs-number">443</span><br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_51594453/article/details/120605700">【Note】git上手-解决连接github时connection reset的问题_github connection reset-CSDN博客</a></p><p>修改了.ssh目录的config，之后的bug</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">fatal: unable <span class="hljs-keyword">to</span> <span class="hljs-keyword">access</span> <span class="hljs-symbol">&#x27;https</span>://github.com/narrciss/narrciss.github.io.git/&#x27;: Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> github.com <span class="hljs-keyword">port</span> <span class="hljs-number">443</span> <span class="hljs-keyword">after</span> <span class="hljs-number">21209</span> ms: Couldn<span class="hljs-symbol">&#x27;t</span> connect <span class="hljs-keyword">to</span> server<br>FATAL Something<span class="hljs-symbol">&#x27;s</span> wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html<br><span class="hljs-literal">Error</span>: Spawn failed<br></code></pre></td></tr></table></figure><h3 id="解决方法5（没有使用）"><a href="#解决方法5（没有使用）" class="headerlink" title="解决方法5（没有使用）"></a>解决方法5（没有使用）</h3><p><a href="https://zhuanlan.zhihu.com/p/521340971">坑：ssh: connect to host github.com port 22: Connection refused - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>blog</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
